<?php
/**
 *   @copyright Copyright (c) 2007 Quality Unit s.r.o.
 *   @author Michal Bebjak
 *   @package GwtPhpFramework
 *   @since Version 1.0.0
 *   $Id: Paths.class.php 20126 2008-08-25 13:20:39Z vzeman $
 *
 *   Licensed under the Quality Unit, s.r.o. Dual License Agreement,
 *   Version 1.0 (the "License"); you may not use this file except in compliance
 *   with the License. You may obtain a copy of the License at
 *   http://www.qualityunit.com/licenses/gpf
 *
 */

/**
 * This class can be generated using parsePrivileges.php script in applications scripts folder
 *
 * @package GwtPhpFramework
 */
abstract class Gpf_Privileges extends Gpf_Object {
    const P_ALL = "*";
    
    private $defaultPrivilieges;
    /**
     * @var array
     */
	protected $objectRelation;
    
    public function __construct() {
        $this->defaultPrivilieges = array();
        $this->initDefaultPrivileges();
        Gpf_Plugins_Engine::extensionPoint('Core.initPrivileges', $this);
    }

    protected abstract function initDefaultPrivileges();

    public function addPrivilege($object, $privilege) {
        if(!array_key_exists($object, $this->defaultPrivilieges)) {
            $privileges = array();
            $privileges[$privilege] = $privilege;
            $this->defaultPrivilieges[$object] = $privileges;
            return;
        }
        $privileges = $this->defaultPrivilieges[$object];
        if(!array_key_exists($privilege, $privileges)) {
            $this->defaultPrivilieges[$object][$privilege] = $privilege;
        }
    }

    public function getDefaultPrivileges() {
        return $this->defaultPrivilieges;
    }    

    private static function loadPrivilegesFromDefault($privilegeList) {
        $privilegesResult = array();
        foreach ($privilegeList as $object => $privileges) {
            foreach ($privileges as $privilege) {
                $privilegesResult[$object][$privilege] = true;
            }
        }
        return $privilegesResult;
    }    
    
    /**
     * Get array of role privileges
     *
     * @param string $roleId
     * @return array
     */
    public static function loadPrivileges($roleId) {
        try {
            return self::loadPrivilegesFromDefault(
            Gpf_Application::getInstance()->getRoleDefaultPrivileges($roleId));
        } catch (Gpf_Exception $e) {
            $privilegesValues = array();
            $privilegesTable = Gpf_Db_Table_RolePrivileges::getInstance();
            $privileges = $privilegesTable->getAllPrivileges($roleId);
            foreach ($privileges as $privilege) {
                $privilegesValues[$privilege->get('object')][$privilege->get('privilege')] = true;
            }
            return $privilegesValues;
        }
        
    }
    
    /**
     * @return array
     */
    public function getObjectToTypeRelation() {
    	if (is_null($this->objectRelation)) {
			$this->objectRelation = $this->initObjectRelation();
		}
		return $this->objectRelation;
    }
    
    //All after start tag is autogenerated !
    //Don't delete following line !!!!!
    //<PRIVILEGES_START>

	// Privilege types
	const P_READ = "read";
	const P_WRITE = "write";
	const P_LOGOUT = "logout";
	const P_DELETE = "delete";
	const P_EXPORT = "export";
	const P_IMPORT = "import";
	const P_ADD = "add";
	const P_EXECUTE = "execute";

	// Privilege objects
	const AUTHENTICATION = "authentication"; // P_LOGOUT
	const COUNTRY = "country"; // P_READ, P_WRITE
	const CURRENCY = "currency"; // P_READ
	const DB_FILE = "db_file"; // P_READ, P_WRITE
	const EMAIL_SETTING = "email_setting"; // P_READ, P_WRITE
	const EXPORT = "export"; // P_READ
	const EXPORT_FILE = "export_file"; // P_DELETE, P_EXPORT, P_READ
	const FEATURE = "feature"; // P_READ
	const FILTER = "filter"; // P_DELETE, P_READ, P_WRITE
	const FORM_FIELD = "form_field"; // P_ADD, P_DELETE, P_EXPORT, P_READ, P_WRITE
	const GADGET = "gadget"; // P_ADD, P_DELETE, P_EXPORT, P_READ, P_WRITE
	const GEOIP = "geoip"; // P_READ
	const GOOGLEMAPS = "googlemaps"; // P_READ, P_WRITE
	const GRID_VIEW = "grid_view"; // P_ADD, P_DELETE, P_WRITE
	const IMPORT = "import"; // P_READ
	const IMPORT_EXPORT = "import_export"; // P_EXPORT, P_IMPORT, P_READ
	const LANGUAGE = "language"; // P_ADD, P_DELETE, P_EXPORT, P_IMPORT, P_READ, P_WRITE
	const LOG = "log"; // P_ADD, P_DELETE, P_EXPORT, P_READ, P_WRITE
	const MAIL_OUTBOX = "mail_outbox"; // P_ADD, P_DELETE, P_EXPORT, P_READ, P_WRITE
	const MAIL_TEMPLATE = "mail_template"; // P_EXPORT, P_READ, P_WRITE
	const MASS_EMAIL = "mass_email"; // P_WRITE
	const MENU = "menu"; // P_READ
	const MYPROFILE = "myprofile"; // P_READ, P_WRITE
	const NEWSLETTER = "newsletter"; // P_ADD, P_DELETE, P_EXPORT, P_READ, P_WRITE
	const ONLINE_USER = "online_user"; // P_DELETE, P_EXPORT, P_READ
	const PASSWORD_CONSTRAINTS = "password_constraints"; // P_READ, P_WRITE
	const PLUGIN = "plugin"; // P_READ, P_WRITE
	const PROXY_SETTING = "proxy_setting"; // P_ADD, P_READ, P_WRITE
	const QUICKLAUNCH = "quicklaunch"; // P_READ, P_WRITE
	const RECURRENCE = "recurrence"; // P_READ
	const REGIONAL_SETTINGS = "regional_settings"; // P_READ, P_WRITE
	const ROLE = "role"; // P_ADD, P_DELETE, P_EXPORT, P_READ, P_WRITE
	const SIDEBAR = "sidebar"; // P_READ, P_WRITE
	const TASKS = "tasks"; // P_DELETE, P_EXECUTE, P_EXPORT, P_READ
	const TEMPLATE = "template"; // P_READ, P_WRITE
	const THEME = "theme"; // P_READ, P_WRITE
	const UPLOADED_FILE = "uploaded_file"; // P_DELETE, P_READ
	const USER = "user"; // P_READ
	const WALLPAPER = "wallpaper"; // P_ADD, P_DELETE, P_READ, P_WRITE
	const WINDOW = "window"; // P_READ, P_WRITE
	

	protected function initObjectRelation() {
		return array(
		self::AUTHENTICATION=>array(self::P_LOGOUT),
		self::COUNTRY=>array(self::P_READ, self::P_WRITE),
		self::CURRENCY=>array(self::P_READ),
		self::DB_FILE=>array(self::P_READ, self::P_WRITE),
		self::EMAIL_SETTING=>array(self::P_READ, self::P_WRITE),
		self::EXPORT=>array(self::P_READ),
		self::EXPORT_FILE=>array(self::P_DELETE, self::P_EXPORT, self::P_READ),
		self::FEATURE=>array(self::P_READ),
		self::FILTER=>array(self::P_DELETE, self::P_READ, self::P_WRITE),
		self::FORM_FIELD=>array(self::P_ADD, self::P_DELETE, self::P_EXPORT, self::P_READ, self::P_WRITE),
		self::GADGET=>array(self::P_ADD, self::P_DELETE, self::P_EXPORT, self::P_READ, self::P_WRITE),
		self::GEOIP=>array(self::P_READ),
		self::GOOGLEMAPS=>array(self::P_READ, self::P_WRITE),
		self::GRID_VIEW=>array(self::P_ADD, self::P_DELETE, self::P_WRITE),
		self::IMPORT=>array(self::P_READ),
		self::IMPORT_EXPORT=>array(self::P_EXPORT, self::P_IMPORT, self::P_READ),
		self::LANGUAGE=>array(self::P_ADD, self::P_DELETE, self::P_EXPORT, self::P_IMPORT, self::P_READ, self::P_WRITE),
		self::LOG=>array(self::P_ADD, self::P_DELETE, self::P_EXPORT, self::P_READ, self::P_WRITE),
		self::MAIL_OUTBOX=>array(self::P_ADD, self::P_DELETE, self::P_EXPORT, self::P_READ, self::P_WRITE),
		self::MAIL_TEMPLATE=>array(self::P_EXPORT, self::P_READ, self::P_WRITE),
		self::MASS_EMAIL=>array(self::P_WRITE),
		self::MENU=>array(self::P_READ),
		self::MYPROFILE=>array(self::P_READ, self::P_WRITE),
		self::NEWSLETTER=>array(self::P_ADD, self::P_DELETE, self::P_EXPORT, self::P_READ, self::P_WRITE),
		self::ONLINE_USER=>array(self::P_DELETE, self::P_EXPORT, self::P_READ),
		self::PASSWORD_CONSTRAINTS=>array(self::P_READ, self::P_WRITE),
		self::PLUGIN=>array(self::P_READ, self::P_WRITE),
		self::PROXY_SETTING=>array(self::P_ADD, self::P_READ, self::P_WRITE),
		self::QUICKLAUNCH=>array(self::P_READ, self::P_WRITE),
		self::RECURRENCE=>array(self::P_READ),
		self::REGIONAL_SETTINGS=>array(self::P_READ, self::P_WRITE),
		self::ROLE=>array(self::P_ADD, self::P_DELETE, self::P_EXPORT, self::P_READ, self::P_WRITE),
		self::SIDEBAR=>array(self::P_READ, self::P_WRITE),
		self::TASKS=>array(self::P_DELETE, self::P_EXECUTE, self::P_EXPORT, self::P_READ),
		self::TEMPLATE=>array(self::P_READ, self::P_WRITE),
		self::THEME=>array(self::P_READ, self::P_WRITE),
		self::UPLOADED_FILE=>array(self::P_DELETE, self::P_READ),
		self::USER=>array(self::P_READ),
		self::WALLPAPER=>array(self::P_ADD, self::P_DELETE, self::P_READ, self::P_WRITE),
		self::WINDOW=>array(self::P_READ, self::P_WRITE)
		);
	}

}
?>
