<?php
/**
 *   @copyright Copyright (c) 2007 Quality Unit s.r.o.
 *   @author Andrej Harsani, Michal Bebjak
 *   @package GwtPhpFramework
 *   @since Version 1.0.0
 *   $Id: Table.class.php 31513 2011-03-04 13:03:43Z jsimon $
 *
 *   Licensed under the Quality Unit, s.r.o. Dual License Agreement,
 *   Version 1.0 (the "License"); you may not use this file except in compliance
 *   with the License. You may obtain a copy of the License at
 *   http://www.qualityunit.com/licenses/gpf
 *
 */

/**
 * @package GwtPhpFramework
 */
abstract class Gpf_DbEngine_Table extends Gpf_Object {
    const CHAR = 'char';
    const INT = 'int';
    const FLOAT = 'float';
    const DATETIME = 'datetime';

    /**
     * @var array of Gpf_DbEngine_Column
     */
    private $columns;
    /**
     * @var array of Gpf_DbEngine_Column
     */
    private $primaryColumns;
    /**
     * @var array of Gpf_DbEngine_Row_Constraint
     */
    private $constraints;
    /**
     * @var array of Gpf_DbEngine_DeleteConstraint
     */
    private $deleteConstraints;
    
    private $autoIncrementedColumn = null;
    private $name;
    private $columnsInitialized;
    private $constraintsInitialized;
    
    final protected function __construct() {
        $this->initName();
        $this->columns = array();
        $this->primaryColumns = array();
        $this->constraints = array();
        $this->deleteConstraints = array();
        $this->columnsInitialized = false;
        $this->constraintsInitialized = false;
    }
    
    private function initColumnsIfNeeded() {
        if ($this->columnsInitialized === true) {
            return;
        }
        $this->initColumns();
        $this->columnsInitialized = true;
    }
        
   private function initConstraintsIfNeeded() {
        if ($this->constraintsInitialized === true) {
            return;
        }
        $this->initConstraints();
        $this->constraintsInitialized = true;
    }
    
    abstract protected function initName();

    protected abstract function initColumns();
    
    protected function initConstraints() {
    }
    
    protected function setName($name) {
        $this->name = $name;
    }
    
    public function name() {
        return DB_TABLE_PREFIX . $this->name;
    }
    
    public function addConstraint(Gpf_DbEngine_Row_Constraint $constraint) {
        $this->constraints[] = $constraint;
    }
    
    /**
     * @return array of Gpf_DbEngine_Column
     */
    public function getColumns() {
        $this->initColumnsIfNeeded();
        return $this->columns;
    }

    /**
     * @return array of Gpf_DbEngine_Column
     */
    public function getPrimaryColumns() {
        $this->initColumnsIfNeeded();
        return $this->primaryColumns;
    }

    /**
     * @param string $column
     * @return boolean
     */
    public function isPrimary($column) {
        $this->initColumnsIfNeeded();
        return array_key_exists($column, $this->primaryColumns);
    }

    public function createPrimaryColumn($name, $type, $lenght = 0, $autogenerated = false) {
        $column = $this->createColumn($name, $type, $lenght, true);
        
        if($column->type == Gpf_DbEngine_Column::TYPE_NUMBER && $autogenerated 
            && $this->autoIncrementedColumn !== null) {
            throw new Gpf_Exception("duplicate key");
        }
        
        if($column->type == Gpf_DbEngine_Column::TYPE_NUMBER && $autogenerated) {
            $this->autoIncrementedColumn = $column;
        }
        
        $column->setAutogenerated($autogenerated);
        $this->primaryColumns[$name] = $column;
    }
    
    /**
     * @param string $name
     * @param string $type
     * @param int $length
     * @param boolean $mandatory
     * @return Gpf_DbEngine_Column
     */
    public function createColumn($name, $type, $length = 0, $mandatory = false) {
        $column = new Gpf_DbEngine_Column($name, $type, $length, $mandatory);
        $this->columns[$name] = $column;
        if ($length != 0 && $column->getType() == Gpf_DbEngine_Column::TYPE_STRING) {
            $this->addConstraint(new Gpf_DbEngine_Row_LengthConstraint($column->getName(), 0, $column->getLength()));
        }
        if ($column->getType() == Gpf_DbEngine_Column::TYPE_NUMBER) {
            $this->addConstraint(new Gpf_DbEngine_Row_NumberConstraint($column->getName()));
        }
        return $column;
    }
    
    /**
     *
     * @return Gpf_DbEngine_Column
     */
    public function getAutoIncrementedColumn() {
        $this->initColumnsIfNeeded();
        return $this->autoIncrementedColumn;        
    }
    
    public function hasAutoIncrementedKey() {
        $this->initColumnsIfNeeded();
        return $this->autoIncrementedColumn !== null;        
    }
    
    public function hasColumn($columnName) {
        $this->initColumnsIfNeeded();
        return array_key_exists($columnName, $this->columns);        
    }

    public function getColumn($name) {
        $this->initColumnsIfNeeded();
        return $this->columns[$name];
    }
    
    /**
     * @return array of Gpf_DbEngine_Row_Constraint
     */
    public function getConstraints() {
        $this->initConstraintsIfNeeded();
        return $this->constraints;
    }
    
    public function truncate() {
    	$this->createDatabase()->execute('TRUNCATE ' . $this->name());
    }
    
    public function optimize() {
        $this->createDatabase()->execute('OPTIMIZE TABLE ' . $this->name());
    }
    
    public function addDeleteConstraint(Gpf_DbEngine_DeleteConstraint $deleteConstraint) {
        $this->deleteConstraints[] = $deleteConstraint; 
    }
    
    protected function addCascadeDeleteConstraint($selfColumns, $foreignColumns, Gpf_DbEngine_Row $foreignDbRow) {
        $this->addDeleteConstraint(new Gpf_DbEngine_CascadeDeleteConstraint($selfColumns, $foreignColumns, $foreignDbRow));
    }
    
    protected function addSetNullDeleteConstraint($selfColumns, $foreignColumns, Gpf_DbEngine_Row $foreignDbRow) {
        $this->addDeleteConstraint(new Gpf_DbEngine_SetNullDeleteConstraint($selfColumns, $foreignColumns, $foreignDbRow));
    }
    
    protected function addRestrictDeleteConstraint($selfColumns, $foreignColumns, Gpf_DbEngine_Row $foreignDbRow) {
        $this->addDeleteConstraint(new Gpf_DbEngine_RestrictDeleteConstraint($selfColumns, $foreignColumns, $foreignDbRow));
    }
    
    /**
     * @return array of Gpf_DbEngine_DeleteConstraint
     */
    public function getDeleteConstraints() {
        $this->initConstraintsIfNeeded();
        return $this->deleteConstraints;
    }
}

?>
