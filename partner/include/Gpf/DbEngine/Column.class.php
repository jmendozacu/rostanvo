<?php
/**
 *   @copyright Copyright (c) 2007 Quality Unit s.r.o.
 *   @author Andrej Harsani
 *   @package GwtPhpFramework
 *   @since Version 1.0.0
 *   $Id: Column.class.php 18003 2008-05-13 19:09:28Z aharsani $
 *
 *   Licensed under the Quality Unit, s.r.o. Dual License Agreement,
 *   Version 1.0 (the "License"); you may not use this file except in compliance
 *   with the License. You may obtain a copy of the License at
 *   http://www.qualityunit.com/licenses/gpf
 *
 */

/**
 * @package GwtPhpFramework
 */
class Gpf_DbEngine_Column extends Gpf_Object {

    public $name;
    public $type;
    public $length;
    public $needed;
    private $_autogenerated = false;

    const TYPE_NUMBER = "Number";
    const TYPE_STRING = "String";
    const TYPE_DATE = "Date";

    function __construct($name, $type, $length = 0, $mandatory = false) {
        $this->name = $name;
        $this->setType($type);
        $this->length = $length;
        $this->needed = $mandatory;
    }

    public function setAutogenerated($autogenerated) {
        $this->_autogenerated = $autogenerated;
    }

    public function isAutogenerated() {
        return $this->_autogenerated;
    }

    private function setType($value) {
        switch(strtolower($value)) {
            case 'varchar':
            case 'char':
            case 'text':
            case 'string':
                $this->type = self::TYPE_STRING;
                break;
            case 'int':
            case 'integer':
            case 'number':
            case 'double':
            case 'float':
                $this->type = self::TYPE_NUMBER;
                break;
            case 'datetime':
            case 'date':
            case 'time':
                $this->type = self::TYPE_DATE;
                break;
        }
    }

    public function doQuote() {
        if ($this->type == 'Number') {
            return false;
        }
        return true;
    }

    public function getName() {
        return $this->name;
    }
    
    public function getType() {
        return $this->type;
    }
    
    public function getLength() {
        return $this->length;
    }
}

?>
