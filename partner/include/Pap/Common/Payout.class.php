<?php
/**
 *   @copyright Copyright (c) 2007 Quality Unit s.r.o.
 *   @package PostAffiliatePro
 *   @author Michal Bebjak
 *   @since Version 1.0.0
 *   $Id: Banner.class.php 16622 2008-03-21 09:39:50Z aharsani $
 *
 *   Licensed under the Quality Unit, s.r.o. Standard End User License Agreement,
 *   Version 1.0 (the "License"); you may not use this file except in compliance
 *   with the License. You may obtain a copy of the License at
 *   http://www.qualityunit.com/licenses/license
 *
 */

/**
 * @package PostAffiliatePro
 */
class Pap_Common_Payout extends Pap_Db_Payout {

    /**
     * @var Pap_Common_User
     */
    private $user;
    /**
     * @var Gpf_Db_Currency
     */
    private $currency;

    /**
     * @var Pap_Db_PayoutOption
     */
    private $payoutOption;

    /**
     * @var array<Pap_Db_PayoutOption>
     */
    private static $cachedPayoutOptions = array();

    private $payoutOptionFields;
    private static $cachedPayoutOptionFields = array();

    private $applyVat;
    private $vatPercentage = 0;
    private $vatNumber = 0;
    private $amountOfRegCapital = 0;
    private $regNumber = 0;
    private $amountVatPart = 0;
    private $amountWithVat = 0;
    private $amountWithoutWat = 0;

    /**
     * This class needs to be initialized by row from select generated by
     * Pap_Merchants_Payout_PayAffiliatesForm::getAffiliatesToPaySelect();
     *
     * @param $record
     */
    function __construct(Pap_Common_User $user, Gpf_Db_Currency $currency, $amount, $invoiceNumber) {
        parent::__construct();
        $this->user = $user;
        $this->currency = $currency;
        $this->setInvoiceNumber($invoiceNumber);

        $this->setUserId($this->user->getId());
        $this->computeAmount($amount);
        $this->initPayoutOption();
        if ($this->payoutOption != null) {
            $this->initPayoutOptionFields();
        }
    }

    public function setPayoutHistory(Pap_Db_PayoutHistory $payoutHistory) {
        $this->setPayoutHistoryId($payoutHistory->getId());
        $this->setAffiliateNote($payoutHistory->getAffiliateNote());
    }

    /**
     * @return Gpf_Db_Currency
     */
    public function getCurrency() {
        return $this->currency;
    }

    public function getPayoutOption() {
        return $this->payoutOption;
    }

    public function getVatPercentage() {
        return $this->vatPercentage;
    }

    public function getVatNumber() {
        return $this->vatNumber;
    }

    public function getRegNumber() {
        return $this->regNumber;
    }

    public function getAmountOfRegisteredCapital() {
        return $this->amountOfRegCapital;
    }

    public function getAmountVatPart() {
        return $this->amountVatPart;
    }

    public function getAmountWithVat() {
        return $this->amountWithVat;
    }

    public function getAmountWithoutWat() {
        return $this->amountWithoutWat;
    }

    private function initPayoutOption() {
        if (!array_key_exists($this->user->getPayoutOptionId(), self::$cachedPayoutOptions)) {
            $payoutOption = new Pap_Db_PayoutOption();
            $payoutOption->setID($this->user->getPayoutOptionId());
            try {
                $payoutOption->load();
            } catch (Gpf_Exception $e) {
                $payoutOption = null;
            }
            self::$cachedPayoutOptions[$this->user->getPayoutOptionId()] = $payoutOption;
        }
        $this->payoutOption = self::$cachedPayoutOptions[$this->user->getPayoutOptionId()];
    }

    private function initPayoutOptionFields() {
        if (!array_key_exists($this->payoutOption->getFormId(), self::$cachedPayoutOptionFields)) {
            self::$cachedPayoutOptionFields[$this->payoutOption->getFormId()] =
            Gpf_Db_Table_FormFields::getInstance()->getFieldsNoRpc($this->payoutOption->getFormId());
        }
        $this->payoutOptionFields = self::$cachedPayoutOptionFields[$this->payoutOption->getFormId()];
    }

    protected function isAllowedApplyVatInvoicing(Gpf_Db_Table_UserAttributes $userAttributes) {
        try {
            if ($userAttributes->getAttribute("apply_vat_invoicing") == Gpf::YES) {
                return true;
            }
        } catch (Gpf_Data_RecordSetNoRowException $e) {
            return false;
        }
        return false;
    }

    /**
     * @return Gpf_Db_Table_UserAttributes
     */
    protected function getUserAttributes() {
        $userAttributes = Gpf_Db_Table_UserAttributes::getInstance();
        $userAttributes->loadAttributes($this->user->getAccountUserId());
        return $userAttributes;
    }

    public function setApplyVat($value) {
        $this->applyVat = $value;
    }

    public function getApplyVat() {
        return $this->applyVat;
    }

    private function computeAmount($amountRaw) {
        $this->setAmount($this->round($amountRaw));
        $userAttributes = $this->getUserAttributes();

        $this->setApplyVat(Gpf_Settings::get(Pap_Settings::SUPPORT_VAT_SETTING_NAME) == Gpf::YES
        && $this->isAllowedApplyVatInvoicing($this->getUserAttributes()));
        if (!$this->getApplyVat()) {
            return;
        }
        $this->vatPercentage = $userAttributes->getAttribute(Pap_Settings::VAT_PERCENTAGE_SETTING_NAME);
        if (is_null($this->vatPercentage) || $this->vatPercentage == '') {
            $this->vatPercentage = Gpf_Settings::get(Pap_Settings::VAT_PERCENTAGE_SETTING_NAME);
        }
        $this->vatNumber = $userAttributes->getAttribute("vat_number");
        $this->regNumber = $userAttributes->getAttribute("reg_number");
        $this->amountOfRegCapital = $userAttributes->getAttribute('amount_of_reg_capital');
        if(Gpf_Settings::get(Pap_Settings::VAT_COMPUTATION_SETTING_NAME) == Pap_Merchants_Payout_VatHandlingForm::VAT_COMPUTATION_ADD_TO_COMMISSION) {
            $this->amountWithVat = $this->round($amountRaw * (1 + ($this->vatPercentage / 100)));
            $this->amountWithoutWat = $this->round($amountRaw);
        } else {
            $this->amountWithVat = $this->round($amountRaw);
            $this->amountWithoutWat = $this->round($amountRaw / (1 + ($this->vatPercentage / 100)));
        }

        $this->amountVatPart = $this->amountWithVat - $this->amountWithoutWat;
    }

    protected function round($value) {
        return round($value, $this->currency->getPrecision());
    }

    private function getInvoiceText() {
        if ($this->getApplyVat()) {
            return Gpf_Settings::get(Pap_Settings::PAYOUT_INVOICE_WITH_VAT_SETTING_NAME);
        } else {
            return Gpf_Settings::get(Pap_Settings::PAYOUT_INVOICE);
        }
    }

    private function assignPayoutVariablesToTemplate(Gpf_Templates_Template $template) {
        $template->assignAttributes($this->user);
        $template->assign('vat_number', $this->vatNumber);
        $template->assign('reg_number', $this->regNumber);
        $template->assign('amount_of_reg_capital', $this->amountOfRegCapital);
        $template->assign('vat_percentage', $this->vatPercentage);
        $template->assign('payoutcurrency', $this->currency->getName());
        $template->assign('affiliate_note', $this->getAffiliateNote());
        $template->assign('payment', $this->getAmount());
        $template->assign('amount', str_replace('.', ',', $this->getAmount()));
        $template->assign('currency', $this->currency->getName());

        if ($this->payoutOption != null) {
            $template->assign('payoutmethod', $this->_localize($this->payoutOption->getName()));
        }
        $template->assign('payment_vat_part', $this->amountVatPart);
        $template->assign('payment_incl_vat', $this->amountWithVat);
        $template->assign('payment_excl_vat', $this->amountWithoutWat);

        $historyItem = $this->getPayoutHistoryItem();
        if ($historyItem === null) {
            
            $template->assign('date', Gpf_Common_DateUtils::getDateInLocaleFormat());
            $template->assign('time', Gpf_Common_DateUtils::getTimeInLocaleFormat());
        } else {
            $time = new Gpf_DateTime($historyItem->getDateInserted());
            $template->assign('date', Gpf_Common_DateUtils::getDateInLocaleFormat($time->toTimestamp()));
            $template->assign('time', Gpf_Common_DateUtils::getTimeInLocaleFormat($time->toTimestamp()));
        }
        $template->assign('invoicenumber',$this->getInvoiceNumber());

        if ($this->payoutOptionFields != null) {
            $userPayoutOptions = Pap_Db_Table_UserPayoutOptions::getInstance()->getValues(
            $this->payoutOption->getFormId(), $this->user->getId());
            foreach ($this->payoutOptionFields as $payoutOptionField) {
                $code = $payoutOptionField->get('code');
                if (array_key_exists($code, $userPayoutOptions)) {
                    $template->assign($code, $userPayoutOptions[$code]->getValue());
                }
            }
        }
    }

    /**
     * @return Pap_Db_PayoutHistory
     */
    public function getPayoutHistoryItem() {
        $historyItem = new Pap_Db_PayoutHistory();        
        $historyItem->setId($this->getPayoutHistoryId());
        try {
            $historyItem->load();
        } catch (Gpf_Exception $e) {
            return null;
        }
        return $historyItem;
    }

    public function generateInvoice($invoiceText = null) {
        if ($invoiceText === null) {
            $invoiceText = $this->getInvoiceText();
        }
        $invoice = new Gpf_Templates_Template($invoiceText, '', Gpf_Templates_Template::FETCH_TEXT);
        $this->assignPayoutVariablesToTemplate($invoice);
        $this->setInvoice($invoice->getHTML());
    }

    public function sendEmail() {
        if ($this->getApplyVat()) {
            $mailTemplate = new Pap_Mail_OnVATPayout();
        } else {
            $mailTemplate = new Pap_Mail_OnPayout();
        }
        $mailTemplate->setUser($this->user);
        $mailTemplate->setPayout($this);
        $mailTemplate->addRecipient($this->user->getEmail());

        $mailTemplate->send();
    }

    /**
     * @param boolean $toMerchant
     */
    public function sendInvoice($toMerchant = false) {
        $mailTemplate = $this->createInvoiceMail($toMerchant);
        $mailTemplate->setUser($this->user);
        $mailTemplate->setPayout($this);
        $mailTemplate->send();
    }

    public function getExportRow() {
        $rowTemplate = new Gpf_Templates_Template($this->payoutOption->getExportRowTemplate(), '', Gpf_Templates_Template::FETCH_TEXT);

        $this->assignPayoutVariablesToTemplate($rowTemplate);

        return $rowTemplate->getHTML();
    }

    /**
     * @param boolean $toMerchant
     */
    private function createInvoiceMail($toMerchant) {
        if ($toMerchant) {
            $mailTemplate = new Pap_Mail_MerchantInvoice();
            $mailTemplate->addRecipient(Pap_Common_User::getMerchantEmail());
            $mailTemplate->setFromEmail($this->user->getEmail());
            return $mailTemplate;
        }
        $mailTemplate = new Pap_Mail_AffiliateInvoice();
        $mailTemplate->addRecipient($this->user->getEmail());
        return $mailTemplate;
    }
}

?>
